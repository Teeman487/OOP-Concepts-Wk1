public class Main {
    public static void main(String[] args) {
        /* Composition implies a parent-child relationship. The child cannot exist independent of the parent
 (i.e a Teachers Object is intended to compose a Person Object). The lifecycles of the involved objects are the same,
if one is garbage collected the other will also be garbage collected*/
        // COMPOSITION 1
        ArrayList<Teachers> mathTeacher = new ArrayList<>();
        Teachers t1 = new Teachers("Mrs","Akinde","Lola","21/05/1999","F",
                "090123473","lola34@gmail.com", "Maths",35000,9,true,mathTeacher);
        Teachers t2 = new Teachers("Mrs","Akinde","Lola","21/05/1999","F",
                "090123473","lola34@gmail.com", "Maths",35000,9,true,mathTeacher);

        mathTeacher.add(t1);
        mathTeacher.add(t2);
        Person per1 = new Person("Mr","Ajani","Babatubde","01/01/1994","Male",
                "0824566222","ajani2@gmail.com",mathTeacher); // Composition
        //System.out.println("Composition 1:========== " + per1);



        // COMPOSITION 2
        ArrayList<Teachers> engTeacher = new ArrayList<>();
        Teachers t3 = new Teachers("Mrs","Apitan","bola","21/05/1999","F",
                "090123473","bola4@gmail.com", "Maths",25000,9,true,engTeacher);
        Teachers t4 = new Teachers("Mrs","Kehinde","Dala","21/05/1996","F",
                "090123473","lola34@gmail.com", "Maths",45000,8,true,engTeacher);

        engTeacher.add(t3);
        engTeacher.add(t4);

        Person per2 = new Person("Mr","Oni","Abolade","01/01/1981","Male",
                "0823516222","abolade2@gmail.com",mathTeacher); // Composition


        // Aggregation implies a parent-child relationship. The child can exist independently of the parent
        // The lifecycles of each of the involved objects are independent.

        //Aggregation 1
        ArrayList<Person> p1 = new ArrayList();

        p1.add(per1);
        p1.add(per2);

        /*If p1 is garbage collected the "per1" and "per2" objects might not be come garbage themselves as they could be
        part of another p1 */

       // Task 1
        Principal principal = new Principal("Mr","Wale","Akanbi","21/02/1990",
                "Male","09050174845","wale2@gmail.com",50000,12,true);
        System.out.println("Principal info: ============= " + principal); // Principal info: ============= Principal{salary=50000, level=12, maritalStatus=true, title='Mr', lastName='Wale', firstName='Akanbi', dateOfBirth='21/02/1990', gender='Male', phoneNumber='09050174845', emailAddress='wale2@gmail.com', gradeScore=null}
        principal.finalAssessment(); // Remi Bayowa is considered in representing the School
        principal.annualSalary(); // 600000

        //Task2
        Teachers teacher1 = new Teachers("Mrs","Akinde","Lola","21/05/1999","F",
                "090123473","lola34@gmail.com", "Maths",35000,9,true,mathTeacher);
        System.out.println("Teachers info: ============= " + teacher1);
        teacher1.getSubject();  //   child class gets all variables in the constructor including super
        teacher1.getSalary();
        teacher1.annualSalary();
        teacher1.favoriteSubject();

        //Task3
        Teachers teacher2 = new Teachers("Mrs","Salami","Bosede","01/02/1997","F",
                "091143473","bosede23@gmail.com", "English",32000,8,true,engTeacher);
        System.out.println("Teachers info: ============= " + teacher2);
        teacher2.getSubject();
        teacher2.getSalary(); //   child class gets all variables in the constructor including super
        teacher1.annualSalary();
        teacher1.favoriteSubject();

        //Task4
        // Crossing Parent class to child class - UpCasting Dynamic Dispatch
        Person person = new Teachers("Mrs","Salami","Bosede","01/02/1997","F",
                "091143473","bosede23@gmail.com", "English",32000,8,true,mathTeacher);
        System.out.println("Upcasting Teachers(gets variables in super only) info: ============= " + person);
        person.getEmailAddress();// gets variables in super only


        //Task5
        // Crossing Inteface- child class
        School sc = new Teachers("Mrs","Salami","Bosede","01/02/1997","F",
                "091143473","bosede23@gmail.com", "English",32000,8,true,mathTeacher);
        System.out.println("Crossing Interface_Teachers(gets only method created in Interface) info: ============= " + sc);
        sc.annualSalary(); // 384000
        sc.favoriteSubject();//English   // gets only method created in Interface

        //Task6
        //DownCasting Child class -  (Child_class) parent_class_Task4
        Teachers teacher3 = (Teachers)person ;
        System.out.println("Downcasting Teachers_Person info: ============= " + teacher3);
        teacher3.getGender(); // Also gets all variables in the constructor including super
        teacher3.getLevel();

        //Task7
        Students students = new Students("Remi","Bayowa",73,"Maths"); // Association
        System.out.println("Students info: ============= " + students);
        students.favoriteSubject();

          //Association: a form of dependency (a reference to an Object).
         //Both objects have independent lifecycles.

    }
}


import java.util.ArrayList;

public class Person { // Person is a logical entity | Parent/base class/super class
/* Access Modifiers: Defines the scope of variables and methods
-----------------------------------------------------
1) public
2) protected: The protected access modifier is accessible within package and (outside the package but through inheritance only)
3) default: No modifier used, it is treated as default by default. The default modifier is accessible only within package
4) private :accessible only within class.
*/
    String title;        // instance variables or class variables
    String lastName;
    String firstName;
    String dateOfBirth;
    String gender;
    String phoneNumber;
    String emailAddress ;
    Double gradeScore; // no constructor for gradeScore
    public ArrayList<Teachers> mathTeacher;

    /*

Constructor
--------------------
1) Constructor is a special type of a method
2) Constructor used for initilizing class variables
3) Constructor Name should be same as class name
4) Constructor will not return any value(not even void)
5) Constructor will be invoked at the time of object creation.

2 Types Constructor
--------------
1) Default constructor
2) Parameterized constructor         */

    // parameterized constructor
    public Person(String title, String lastName,String firstName, String dateOfBirth, String gender, String phoneNumber,
                  String emailAddress,ArrayList<Teachers> mathTeacher) {
        this.title = title;    // // this represents class variable above
        this.lastName = lastName;
        this.firstName = firstName;
        this.dateOfBirth = dateOfBirth;
        this.gender = gender;
        this.phoneNumber = phoneNumber;
        this.emailAddress = emailAddress;
        this.mathTeacher = mathTeacher;
    }
    /*
Method overloading or Compile time: creating methods/constructors with the same name with different parameters.
Overloading occurs in same class
Advantage:
-----
saves memory
saves time
Consideration for Overloading
1)Number of parameters
2) data type of parameters    */
    void StudentGrade(int Math, int English) { // default is most suitable since im sending the score across in 1package after overloading
        if(Math>=70 && English>=60)    // Results is being overloaded to prevent possible grade errors
        System.out.println(Math+ ", "+ English);
         }
    void StudentGrade(int Math, double English) {
        if(Math>=70 && English>=60)
        System.out.println(Math+ ", "+ English);
    }

    void StudentGrade(double Math, double English) {
        if(Math>=70 && English>=60)
        System.out.println(Math+ ", "+ English);
    }

void studentBdmi(int weight, int height) {  // To access the Wei
        int bodyMassIndex = (int) Math.pow(weight,height * 2);  // BDMI = Weight/h^2
    if (bodyMassIndex>= 25)
        System.out.println(weight+ " , " + height);
}
    void studentBdmi(int weight, double height) {
        int bodyMassIndex = (int) Math.pow(weight,height * 2);
        if (bodyMassIndex>= 25)
            System.out.println(weight+ " , " + height);
    }
    void studentBdmi(double weight,double height) {
        int bodyMassIndex = (int) Math.pow(weight,height * 2);  // BDMI = Weight/h^2
        if (bodyMassIndex>= 25)
            System.out.println(weight+ " , " + height);
    }

    /*  Method Overriding or Runtime
             --------------------
             Rewrite the methods(that was initially in Parent class) to child classes|i.e child classes will override the method in Parent class with conditions below;
            1) method definition should be same
            2) body should be changed                           */
    public static double gradeScore() { // Method Overriding 1 // It will override to the child classes
        return 0;        // Reason for opting for Method Overriding: So that Teacher will access student's gradeScore
    }                        // and sends it to Principal for final assessment b4 sending student to rep the School


    //Getters and Setters
    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getDateOfBirth() {
        return dateOfBirth;
    }

    public void setDateOfBirth(String dateOfBirth) {
        this.dateOfBirth = dateOfBirth;
    }

    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public String getEmailAddress() {
        return emailAddress;
    }

    public void setEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
    }

    public Double getGradeScore() {
        return gradeScore;
    }

    public void setGradeScore(Double gradeScore) {
        this.gradeScore = gradeScore;
    }

    @Override
    public String toString() {
        return "Person{" +
                "title='" + title + '\'' +
                ", lastName='" + lastName + '\'' +
                ", firstName='" + firstName + '\'' +
                ", dateOfBirth='" + dateOfBirth + '\'' +
                ", gender='" + gender + '\'' +
                ", phoneNumber='" + phoneNumber + '\'' +
                ", emailAddress='" + emailAddress + '\'' +
                ", gradeScore=" + gradeScore +
                '}';
    }
}


/*
* if (Math>=70 && English>=69){
               return "A potential student to represent the school"; }
           else { return "student is not a potential"; }

* */




public interface School {  // Not a functional interface

    void favoriteSubject();//  abstract method, access modifier is public by default
    void annualSalary();

}

/*
* Interface
--------------
An interface in java is a blueprint of a class.
Interface contains final and static variables. // int a=10; by default variables interface are static and final
Interface contains abstract methods.
An abstract method is a method contains definition but not body.
Methods in interface are publicly by default.
Interface supports the functionality of multiple inheritance. // 1 class implements two interfaces
We can define interface with interface keyword.
A class extends another class, an interface extends another interface but a class implememts an interface.
*    class1  extends c2 implements Interface1,Interface2
We can create Object reference for Interface but we cannot instantiate interface.
* */



public class  Students implements School {

    String lastName;
    String firstName;
    private static int grade;
    private String subject;

    public Students(String lastName, String firstName, int grade, String subject) {

        this.grade = grade;
        this.subject = subject;
        this.lastName = lastName;
        this.firstName = firstName;
    }

    public static double gradeScore() { // Method Override 2
        return grade;
    }

    //Getters
    public String lastName()
    {
        return lastName;
    }

    public String firstName()
    {
        return firstName;
    }

    public String getSubject()
    {
        return subject;
    }

    @Override
    public String toString() {
        return "Students{" +
                "lastName='" + lastName + '\'' +
                ", firstName='" + firstName + '\'' +
                ", subject='" + subject + '\'' +
                '}';
    }

    // Interface Implementation
    @Override
    public void  favoriteSubject() {
        System.out.println(getSubject());
    }

    @Override
    public void annualSalary() {
        System.out.println();;
    }


}



import java.util.ArrayList;

public class Teachers extends Person implements School {


    private String subject;
    private long salary;
    private int level;
    private boolean maritalStatus;

    public Teachers(String title, String lastName, String firstName, String dateOfBirth, String gender,
                    String phoneNumber, String emailAddress,String subject,long salary,int level,
                    boolean maritalStatus, ArrayList<Teachers> mathTeacher) {
        super(title, lastName, firstName, dateOfBirth, gender, phoneNumber, emailAddress,mathTeacher);
        this.subject = subject;
        this.salary = salary;
        this.level = level;
        this.maritalStatus = maritalStatus;

    }
      // Array extensional method from Parent class
    public  boolean isFunctional = true;  // variable
    public void fix() {
        if(isFunctional)
            System.out.println("Hes truly working");
            else {
            System.out.println(" Hes not active");
        }
    }



    public String getSubject() {
        return subject;
    }

    public long getSalary() {
        return salary;
    }

    public int getLevel() {
        return level;
    }

    public boolean isMaritalStatus() {
        return maritalStatus;
    }


    public static double gradeScore() {  // Method Override 3

          return Students.gradeScore() + 0 ; //
    }

    // Interface Implementation

    @Override
    public void favoriteSubject() {
        System.out.println(subject);
    }

    @Override
    public void annualSalary() {

        System.out.println(getSalary() * 12); ;
    }

}



public class Principal implements School {


    private long salary;
    private int level;
    private boolean maritalStatus;

    public Principal(String title, String lastName, String firstName, String dateOfBirth, String gender,
                     String phoneNumber, String emailAddress,long salary, int level, boolean maritalStatus) {
        this.salary = salary;
        this.level = level;
        this.maritalStatus = maritalStatus;
    }

    public long getSalary() {
        return salary;
    }

    public void setSalary(long salary) {
        this.salary = salary;
    }

    public int getLevel() {
        return level;
    }

    public void setLevel(int level) {
        this.level = level;
    }

    public boolean isMaritalStatus() {
        return maritalStatus;
    }

    public void setMaritalStatus(boolean maritalStatus) {
        this.maritalStatus = maritalStatus;
    }

    /*   static ---> applicable for variables and methods static variables static methods
-----------------------
1)
2) static methods can also access non static stuff but through object
3) Non static methods can access both static & non static stuff          */
    void admittedStudents(int admissionGrade) {
        if (Students.gradeScore()>= admissionGrade) // static on method in Students class inorder to use it in class Principal
            System.out.println("Student is admitted into school");
        else System.out.println("Student is rejected");
    }

    public static double gradeScore() { // Method Override  4
               return Teachers.gradeScore()+0; //
    }

    // Principal Constructor
    // Exception in thread "main" thrown when a stack overflow occurs because an application recurses too deeply.
    /*Principal principal = new Principal("Mr","Wale","Akanbi","21/02/1990",
            "Male","09050174845","wale2@gmail.com",50000,12,true);
*/
    Students students = new Students("Remi","Bayowa",73,"Maths");
    void finalAssessment()
    {
        if(Teachers.gradeScore()>=70) {
            System.out.println(students.lastName+" "+students.firstName+ " is considered in representing the School");
        }
        else {
            System.out.println();
        }
    }

    // Interface Implementation
    @Override
    public void favoriteSubject() {}

    @Override
    public void annualSalary() {
     long annualSalary = getSalary() * 12;
        System.out.println(annualSalary); ;
    }

    //To String

    @Override
    public String toString() {
        return "Principal{" +
                "salary=" + salary +
                ", level=" + level +
                ", maritalStatus=" + maritalStatus +
                ", students=" + students +
                '}';
    }
}
